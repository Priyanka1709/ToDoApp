{"version":3,"sources":["webpack:///./js/main.js","webpack:///./styles/style.less","webpack:///./js/utils/js-event-utils.js"],"names":["ToDoApp","initialize","renderList","attachEventHandlers","jsUtils","toDoItems","listItemsPane","document","getElementsByClassName","taskInput","getElementById","addButton","each","value","appendChild","createListItem","resetInput","fireEvent","toDoItem","li","createElement","className","innerText","addCheckbox","addCloseButton","checkbox","setAttribute","addEventListener","e","parentElement","classList","contains","remove","add","closeButton","attachEventsToTaskInput","attachEventsToAddButton","updateListFromInput","keyCode","preventDefault","removeAttribute","eventMap","input","JSEventUtils","elem","event","Event","dispatchEvent"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;IAEMA,O;AACF,uBAAc;AAAA;;AACV;AACA;AACA,aAAKC,UAAL;;AAEA;AACA,aAAKC,UAAL;;AAEA;AACA,aAAKC,mBAAL;AACH;;;;qCAEY;AACT;AACA,iBAAKC,OAAL,GAAe,gCAAf;;AAEA;AACA,iBAAKC,SAAL,GAAiB,EAAjB;;AAEA;AACA,iBAAKC,aAAL,GAAqBC,SAASC,sBAAT,CAAgC,WAAhC,EAA6C,CAA7C,CAArB;;AAEA;AACA,iBAAKC,SAAL,GAAiBF,SAASG,cAAT,CAAwB,WAAxB,CAAjB;AACA,iBAAKC,SAAL,GAAiBJ,SAASC,sBAAT,CAAgC,WAAhC,EAA6C,CAA7C,CAAjB;AACH;;;qCAEY;AACT;AACA,6BAAEI,IAAF,CAAO,KAAKP,SAAZ,EAAuB,UAAUQ,KAAV,EAAiB;AACtC,qBAAKP,aAAL,CAAmBQ,WAAnB,CAA+B,KAAKC,cAAL,CAAoBF,KAApB,CAA/B;AACD,aAFD;AAGH;;;8CAEqB;AAClB;;AAEA;AACA,gBAAI,KAAKJ,SAAL,CAAeI,KAAnB,EAA0B;AACtB,qBAAKP,aAAL,CAAmBQ,WAAnB,CAA+B,KAAKC,cAAL,CAAoB,KAAKN,SAAL,CAAeI,KAAnC,CAA/B;AACA,qBAAKG,UAAL;AACH;AACJ;;;qCAEY;AACT;AACA,iBAAKP,SAAL,CAAeI,KAAf,GAAuB,EAAvB;;AAEA;AACA,iBAAKT,OAAL,CAAaa,SAAb,CAAuB,KAAKR,SAA5B,EAAuC,OAAvC;AACH;;;uCAEcS,Q,EAAU;AACrB;;AAEA,gBAAIC,KAAKZ,SAASa,aAAT,CAAuB,IAAvB,CAAT;AACAD,eAAGE,SAAH,IAAgB,iBAAhB;AACAF,eAAGG,SAAH,GAAeJ,QAAf;;AAEAC,eAAGL,WAAH,CAAe,KAAKS,WAAL,EAAf;AACAJ,eAAGL,WAAH,CAAe,KAAKU,cAAL,EAAf;;AAEA,mBAAOL,EAAP;AACH;;;sCAEa;AACV;;AAEA,gBAAIM,WAAWlB,SAASa,aAAT,CAAuB,OAAvB,CAAf;AACAK,qBAASC,YAAT,CAAsB,MAAtB,EAA8B,UAA9B;;AAEAD,qBAASE,gBAAT,CAA0B,QAA1B,EAAoC,UAAUC,CAAV,EAAa;AAC7C;AACA,oBAAI,KAAKC,aAAL,CAAmBC,SAAnB,CAA6BC,QAA7B,CAAsC,SAAtC,CAAJ,EAAsD;AAClD,yBAAKF,aAAL,CAAmBC,SAAnB,CAA6BE,MAA7B,CAAoC,SAApC;AACH,iBAFD,MAEO;AACH,yBAAKH,aAAL,CAAmBC,SAAnB,CAA6BG,GAA7B,CAAiC,SAAjC;AACH;AAEJ,aARD;;AAUA,mBAAOR,QAAP;AACH;;;yCAEgB;AACb;;AAEA,gBAAIS,cAAc3B,SAASa,aAAT,CAAuB,GAAvB,CAAlB;AACAc,wBAAYJ,SAAZ,CAAsBG,GAAtB,CAA0B,OAA1B;AACAC,wBAAYZ,SAAZ,GAAwB,GAAxB;;AAEAY,wBAAYP,gBAAZ,CAA6B,OAA7B,EAAsC,UAAUC,CAAV,EAAa;AAC/C;AACA,qBAAKC,aAAL,CAAmBG,MAAnB;AACH,aAHD;;AAKA,mBAAOE,WAAP;AACH;;;8CAEqB;AAClB,iBAAKC,uBAAL;AACA,iBAAKC,uBAAL;AACH;;;kDAEyB;AAAA;;AACtB;;AAEA,iBAAKzB,SAAL,CAAegB,gBAAf,CAAgC,OAAhC,EAAyC,aAAK;AAC1C,sBAAKU,mBAAL;AACH,aAFD;AAGH;;;kDAEyB;AAAA;;AACtB;;AAEA,iBAAK5B,SAAL,CAAekB,gBAAf,CAAgC,SAAhC,EAA2C,aAAK;AAC5C;AACA,oBAAIC,EAAEU,OAAF,KAAc,EAAlB,EAAsB;AAClBV,sBAAEW,cAAF;AACA,2BAAKF,mBAAL;AACH;AACJ,aAND;;AAQA,iBAAK5B,SAAL,CAAekB,gBAAf,CAAgC,OAAhC,EAAyC,aAAK;AAC1C;AACA,oBAAI,OAAKlB,SAAL,CAAeI,KAAnB,EAA0B;AACtB,2BAAKF,SAAL,CAAe6B,eAAf,CAA+B,UAA/B;AACH,iBAFD,MAEO;AACH,2BAAK7B,SAAL,CAAee,YAAf,CAA4B,UAA5B,EAAwC,IAAxC;AACH;AACJ,aAPD;AAQH;;;;;;AAGL,IAAI1B,OAAJ,G;;;;;;AC3IA,yC;;;;;;;;;;;;;;;;;ACAA,IAAMyC,WAAW;AACbC,WAAO;AACH,mBAAW,IADR;AAEH,sBAAc;AAFX;AADM,CAAjB;;IAOaC,Y,WAAAA,Y;;;;;;;kCACCC,I,EAAMC,K,EAAO;AACnB,gBAAIA,QAAQ,IAAIC,KAAJ,CAAUD,KAAV,EAAiBJ,SAASI,KAAT,CAAjB,CAAZ;AACAD,iBAAKG,aAAL,CAAmBF,KAAnB;AACH","file":"app.js","sourcesContent":["import '../styles/style.less';\r\nimport {JSEventUtils} from \"./utils/js-event-utils\";\r\nimport _ from 'lodash';\r\n\r\nclass ToDoApp {\r\n    constructor() {\r\n        // initialize application\r\n        debugger;\r\n        this.initialize();\r\n\r\n        // render initial to do list\r\n        this.renderList();\r\n\r\n        // attach event handlers to various UI elements\r\n        this.attachEventHandlers();\r\n    }\r\n\r\n    initialize() {\r\n        // utility to access various js event functions\r\n        this.jsUtils = new JSEventUtils();\r\n\r\n        // initial to do list\r\n        this.toDoItems = [];\r\n\r\n        // reference to panel holding list items\r\n        this.listItemsPane = document.getElementsByClassName('toDoItems')[0];\r\n\r\n        // reference to input textbox and add button\r\n        this.taskInput = document.getElementById('taskInput');\r\n        this.addButton = document.getElementsByClassName('addButton')[0];\r\n    }\r\n\r\n    renderList() {\r\n        // for rendering initial list\r\n        _.each(this.toDoItems, function (value) {\r\n          this.listItemsPane.appendChild(this.createListItem(value));\r\n        });\r\n    }\r\n\r\n    updateListFromInput() {\r\n        // function to update todo list on adding any task in input box\r\n\r\n        // add item only if task input has some value\r\n        if (this.taskInput.value) {\r\n            this.listItemsPane.appendChild(this.createListItem(this.taskInput.value));\r\n            this.resetInput();\r\n        }\r\n    }\r\n\r\n    resetInput() {\r\n        // reset task input to blank\r\n        this.taskInput.value = \"\";\r\n\r\n        // trigger input event so that its handler is invoked on value change\r\n        this.jsUtils.fireEvent(this.taskInput, 'input');\r\n    }\r\n\r\n    createListItem(toDoItem) {\r\n        // function for creating list item for every to do item\r\n\r\n        let li = document.createElement('li');\r\n        li.className += 'list-group-item';\r\n        li.innerText = toDoItem;\r\n\r\n        li.appendChild(this.addCheckbox());\r\n        li.appendChild(this.addCloseButton());\r\n\r\n        return li;\r\n    }\r\n\r\n    addCheckbox() {\r\n        // add checkbox corresponding to a list item\r\n\r\n        let checkbox = document.createElement('input');\r\n        checkbox.setAttribute('type', 'checkbox');\r\n\r\n        checkbox.addEventListener(\"change\", function (e) {\r\n            // toggle checked class on list item on checkbox selection\r\n            if (this.parentElement.classList.contains('checked')) {\r\n                this.parentElement.classList.remove('checked');\r\n            } else {\r\n                this.parentElement.classList.add('checked');\r\n            }\r\n\r\n        });\r\n\r\n        return checkbox;\r\n    }\r\n\r\n    addCloseButton() {\r\n        // add close button corresponding to a list item\r\n\r\n        let closeButton = document.createElement('a');\r\n        closeButton.classList.add('close');\r\n        closeButton.innerText = 'x';\r\n\r\n        closeButton.addEventListener(\"click\", function (e) {\r\n            // remove the li corresponding to list item\r\n            this.parentElement.remove();\r\n        });\r\n\r\n        return closeButton;\r\n    }\r\n\r\n    attachEventHandlers() {\r\n        this.attachEventsToTaskInput();\r\n        this.attachEventsToAddButton();\r\n    }\r\n\r\n    attachEventsToAddButton() {\r\n        // event handlers for add button\r\n\r\n        this.addButton.addEventListener('click', e => {\r\n            this.updateListFromInput();\r\n        });\r\n    }\r\n\r\n    attachEventsToTaskInput() {\r\n        // event handlers for task input box\r\n\r\n        this.taskInput.addEventListener(\"keydown\", e => {\r\n            // prevent default browser behaviour on enter key and update the to do list \r\n            if (e.keyCode === 13) {\r\n                e.preventDefault();\r\n                this.updateListFromInput();\r\n            }\r\n        });\r\n\r\n        this.taskInput.addEventListener(\"input\", e => {\r\n            // enable disable add button based on the value in input box\r\n            if (this.taskInput.value) {\r\n                this.addButton.removeAttribute(\"disabled\");\r\n            } else {\r\n                this.addButton.setAttribute(\"disabled\", true);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nnew ToDoApp();\n\n\n// WEBPACK FOOTER //\n// ./js/main.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./styles/style.less\n// module id = 2\n// module chunks = 0","const eventMap = {\r\n    input: {\r\n        'bubbles': true,\r\n        'cancelable': true\r\n    }\r\n};\r\n\r\nexport class JSEventUtils {\r\n    fireEvent(elem, event) {\r\n        var event = new Event(event, eventMap[event]);\r\n        elem.dispatchEvent(event);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./js/utils/js-event-utils.js"],"sourceRoot":""}